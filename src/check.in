#
# Script that counts events in citrun.log files.
# Tries to be POSIX compatible.
#
function err {
	echo "${1}"
	exit 1
}

dir=`pwd`
if [ $# -eq 1 ]; then
	[[ ${1} = -* ]] && err "usage: citrun-check [dir]"
	dir="${1}"
fi
[ -d $dir ] || err "citrun-check: $dir: no such directory"

GREP[0]="Found source file"
GREP[1]="Tool called as "
GREP[2]="Forked "
GREP[3]="Instrumentation successful"
GREP[4]="And the native compile failed"
GREP[5]="But the native compile succeeded"
GREP[6]="Link detected"
GREP[7]="warning: "
GREP[8]="error: "

DESC[0]="Source files input"
DESC[1]="Calls to the instrumentation tool"
DESC[2]="Forked compilers"
DESC[3]="Instrument successes"
DESC[4]="Both instrument and native compile failed (FP)"
DESC[5]="Instrument failed but native compile succeeded (TP)!"
DESC[6]="Application link commands"
DESC[7]="Warnings during source parsing"
DESC[8]="Errors during source parsing"
desc_len=${#DESC[@]}

FINE[0]="Lines of source code"
FINE[1]="Milliseconds spent transforming source"
FINE[2]="Functions called 'main'"
FINE[3]="Function definitions"
FINE[4]="If statements"
FINE[5]="For loops"
FINE[6]="While loops"
FINE[7]="Do while loops"
FINE[8]="Switch statements"
FINE[9]="Return statement values"
FINE[10]="Call expressions"
FINE[11]="Total statements"
FINE[12]="Binary operators"
FINE[13]="Errors rewriting source"
fine_len=${#FINE[@]}

[ -t 1 ] && echo -n Checking \'$dir\' .
let log_files=0
for d in `find $dir -name citrun.log`; do
	[ -t 1 ] && echo -n .
	let log_files++

	let i=0
	while [ $i -lt $desc_len ]; do
		tmp=`grep -c "${GREP[$i]}" $d`
		let COUNT[$i]+=tmp
		let i++
	done

	let i=0
	typeset -i tmp
	while [ $i -lt $fine_len ]; do
		tmp=`awk "\\$0~/${FINE[$i]}/ { sum += \\$2 } END { print sum }" $d`
		if [ "$tmp" = "" ]; then
			let i++
			continue
		fi
		let FINE_COUNT[$i]+=tmp
		let i++
	done
done
[ -t 1 ] && echo done
[ -t 1 ] && echo

echo Summary:
printf "%10i %s\n" $log_files "Log files found"
[ $log_files -eq 0 ] && exit 0

let i=0
while [ $i -lt $desc_len ]; do
	if [ ${COUNT[$i]} -eq 0 ]; then
		let i++
		continue
	fi
	printf "%10i %s\n" ${COUNT[$i]} "${DESC[$i]}"
	let i++
done

echo
echo Totals:
let i=0
while [ $i -lt $fine_len ]; do
	if [ ${FINE_COUNT[$i]} -eq 0 ]; then
		let i++
		continue
	fi
	printf "%10i %s\n" ${FINE_COUNT[$i]} "${FINE[$i]}"
	let i++
done

#
# Knowing the absolute path to citrun resources is necessary because:
# - instrumented programs must be linked to the runtime library
# - the PATH compiler interception mechanism needs to remove itself from PATH
#
# If PREFIX is set we're building a package, so trust that will be the final
# (after installation) location.
#
if $(PREFIX) {
	echo ...build C It Run (Release) on $(OS)... ;
	CITRUN_SHARE = $(PREFIX)/share/citrun ;
}
else {
	echo ...build C It Run (Debug) on $(OS)... ;
	#CITRUN_SHARE = "`readlink -f $(TOP)/src`" ;
	CITRUN_SHARE = "`cd $(TOP)/src && pwd`" ;
	CFLAGS += -Wall -g ;
}

CCFLAGS += $(CFLAGS) ;
C++FLAGS += -std=c++11 -fno-exceptions -fno-rtti $(CFLAGS) ;
LINKFLAGS += $(LDFLAGS) ;

CLANG_LIBS =
	-lclangAST
	-lclangAnalysis
	-lclangBasic
	-lclangDriver
	-lclangEdit
	-lclangFrontend
	-lclangFrontendTool
	-lclangLex
	-lclangParse
	-lclangRewrite
	-lclangRewriteFrontend
	-lclangSema
	-lclangSerialization
	-lclangTooling ;

if $(OS) = OPENBSD {
	C++ = eg++ ;

	PKG_CONFIG_LIBS = gl glew freetype2 ;
	LINKLIBS on citrun-gl = -lm -lglut ;
	LINKLIBS on citrun-inst += -Wl,--start-group $(CLANG_LIBS) -Wl,--end-group ;
}

if $(OS) = MACOSX {
	PKG_CONFIG_LIBS = glew freetype2 ;
	LINKLIBS on citrun-gl = -framework OpenGL -framework GLUT -lm ;
	LINKLIBS on citrun-inst = $(CLANG_LIBS) ;
}

if $(OS) = LINUX {
	# llvm version is 3.5 on Debian, which is too old.
	PKG_CONFIG_LIBS = gl glew freetype2 ;
	LINKLIBS on citrun-gl = -lbsd -lm -lglut ;
	LINKLIBS on citrun-inst = -lbsd ;
	LINKLIBS on citrun-inst += -Wl,--start-group $(CLANG_LIBS) -Wl,--end-group ;
}

actions StaticAnalysis
{
	export CITRUN_SA=1
	scan-build -o html --use-c++=eg++ jam -j4
	# scan-build -o html -v --use-c++=eg++ jam -j4
}

actions TestCoverage
{
	set -e
	CFLAGS="-coverage -ggdb" LDFLAGS="-coverage" jam -j4

	# Roll libgcov.a into libcitrun.a.
	ar -M < t/libcitrun_gcov.mri

	prove
	# prove tt

	gcov -o src src/rt.c
	egcov -r src/*.cc
}

StaticAnalysis static-analysis ;
TestCoverage test-coverage ;

if $(CITRUN_SA) {
	# scan-build sets these expecting us to pick up the new values.
	CC = $(CC) ;
	C++ = $(CXX) ;
}

# Link with the c++ compiler so that the matching c++ runtime library gets added
# automatically.
LINK on citrun-inst citrun-term citrun-gl = $(C++) ;

rule Stringize
{
	MakeLocate $(1) : $(LOCATE_SOURCE) ;
	SEARCH on $(2) = $(SEARCH_SOURCE) ;
	Depends $(1) : $(2) ;
	Clean clean : $(1) ;
}

actions Stringize
{
	# Quote the entire original source file and put it in the destination.
	sed -e ' s/\\/\\\\/g; s/"/\\"/g; s/^/"/; s/$/\\n"/; ' < $(>) > $(<)
	echo ";" >> $(<)

	# Add the declaration to the start of the file.
	sed -e '1s/^/static const char *$(1:B) = /' -i.bak $(<)
	rm $(<).bak
}

actions ReplaceTokens
{
	sed -e s,%CITRUN_SHARE%,$(CITRUN_SHARE), -i.bak $(<) ;
	rm $(<).bak
}

rule InstallSyms
{
	Depends install : $(PREFIX)/share/citrun/$(>) ;
	MakeLocate $(PREFIX)/share/citrun/$(>) : $(<) ;

	for i in $(>)
	{
		SymLink $(PREFIX)/share/citrun/$(i) ;
	}
}

actions SymLink
{
	$(RM) $(<) && $(LN) -s ../../bin/citrun-inst $(<) ;
}

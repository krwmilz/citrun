#
# OpenBSD ports infrastructure compatibility layer for end to end testing.
# Exports CITRUN_PROCDIR.
#
[ `uname` != "OpenBSD" ] && return 0

set -eu
. tt/libtap.subr

type comm cut diff make nm sed sort > /dev/null || \
	bail "OpenBSD end to end script dependencies not met"

# Script arguments give the path in the OpenBSD ports system.
portdir="/usr/ports/$1/$2"
workdist=`make -C $portdir show=WRKDIST`
workdir=`make -C $portdir show=WRKDIR`

workdir_inst="${workdir}-citrun"
workdist_inst=`make -C $portdir WRKDIR=$workdir_inst show=WRKDIST`

# Release testing must be done on installed package.
if ! pkg_info -e citrun-9999; then
	echo "C It Run not found."
	exit 1
fi

# This is used by the OpenBSD /usr/ports/infrastructure/.
portpath="/usr/local/share/citrun:$workdir_inst/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11R6/bin"

export CITRUN_PROCDIR="$workdir/procdir/"

pkg_extract()
{
	make -C $portdir extract > /dev/null
	ok "is vanilla src extracted in '$workdir'" test $? -eq 0
}

pkg_extract_instrumented()
{
	make -C $portdir WRKDIR="$workdir_inst" extract > /dev/null
	ok "is instrumented src extracted in '$workdir_inst'" test $? -eq 0
}

pkg_check_deps()
{
	make -C $portdir full-all-depends > $workdir/deps
	#make -C $portdir full-test-depends >> $workdir/deps
	sort $workdir/deps | uniq > $workdir/deps.uniq

	pkg_info -q > $workdir/installed
	comm -2 -3 $workdir/deps.uniq $workdir/installed > $workdir/deps_needed

	diff -u /dev/null $workdir/deps_needed || bail "dependencies not met"
	ok "is all `wc -l < $workdir/deps.uniq` port dependencies met"
}

pkg_build()
{
	start=`date +%s`

	make -C $portdir build > $workdir/build.stdout 2> $workdir/build.stderr
	ok 'is make build exit code 0' test $? -eq 0

	diag "Vanilla build took $((`date +%s` - start)) sec"
}

pkg_build_instrumented()
{
	start=`date +%s`

	make -C $portdir PORTPATH="$portpath" WRKDIR="$workdir_inst" build \
		> $workdir_inst/build.stdout \
		2> $workdir_inst/build.stderr
	ok 'is instrumented make build exit code 0' test $? -eq 0

	diag "Instrumented build took $((`date +%s` - start)) sec"
}

pkg_test()
{
	start=`date +%s`

	make -C $portdir test > $workdir/test.stdout 2> $workdir/test.stderr
	ok 'is make test exit code 0' test $? -eq 0

	diag "Vanilla test took $((`date +%s` - start)) sec"
}

pkg_test_instrumented()
{
	ok 'is test with instrumentation successful' \
		make -C $portdir PORTPATH="${portpath}" test
}

pkg_citrun_check()
{
	citrun_check $workdist_inst > $workdir_inst/check.out
	ok 'is citrun_check successful' test $? -eq 0

	ok 'is Milliseconds sanitized' \
		sed -i.bak -e "/Milliseconds spent/d" $workdir_inst/check.out
	ok 'is citrun_check output identical' \
		diff -u $workdir_inst/check.good $workdir_inst/check.out
}

pkg_clean()
{
	make -C $portdir clean=all > /dev/null
	ok 'is make clean exit code 0' test $? -eq 0
	ok 'is rm -rf instrumented workdir exit code 0' rm -rf $workdir_inst
}

#
# By default operates on build.std{out,err} but optionally takes extra files as
# parameters.
#
pkg_scrub_logs()
{
	#
	# Replace port specific paths like /usr/ports/pobj/.* and .text section
	# hex offsets with constants.
	#
	sed -i.bak \
		-e 's;/usr/ports/pobj/.*/;<port_path>;' \
		-e 's/\.text+0x[0-9a-f]*/\.text+OFF/' \
		$workdir/build.stdout $workdir_inst/build.stdout \
		$workdir/build.stderr $workdir_inst/build.stderr \
		$@
}

pkg_diff_build_logs()
{
	ok 'is build stdout identical' \
		diff -u $workdir/build.stdout $workdir_inst/build.stdout
	ok 'is build stderr identical' \
		diff -u $workdir/build.stderr $workdir_inst/build.stderr
}

pkg_diff_symbols()
{
	nm -P $workdist/$1 | cut -f 1-2 -d ' ' | cut -f 1 -d '.' > $workdir/nm.out
	ok "is nm on vanilla binary '$1' exit code 0" test $? -eq 0

	nm -P $workdist_inst/$1 | cut -f 1-2 -d ' ' | cut -f 1 -d '.' > $workdir_inst/nm.out
	ok "is nm on instrumented binary '$1' exit code 0'" test $? -eq 0

	ok 'is symbol diff empty' diff -u $workdir/nm.out $workdir_inst/nm.out
}

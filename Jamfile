SubDir TOP ;

SubInclude TOP bin ;
SubInclude TOP lib ;
SubInclude TOP man ;
SubInclude TOP share citrun ;

actions PkgConfig
{
	set -e
	type pkg-config
	echo

	gl_pkgs="osmesa glfw3 glew freetype2"
	for pkg in $gl_pkgs; do
		echo -n "$pkg = "
		pkg-config --modversion $pkg || echo "NOT FOUND"
	done
}

actions C++11
{
	$(C++) -x c++ -std=c++11 -E - < /dev/null > /dev/null
}

C++11 check_dependencies ;
PkgConfig check_dependencies ;

#
# Run clang static analysis on the build.
#
actions Analysis
{
	scan-build --use-c++=eg++ ./configure
	scan-build -o html --use-c++=eg++ jam
}

#
# Get test coverage of integration test suite.
#
actions TestCoverage
{
	set -e
	CFLAGS="-coverage" LDFLAGS="-coverage" ./configure
	jam

	# Roll libgcov.a into libcitrun.a.
	ar -M < t/libcitrun_gcov.mri

	prove
	# prove tt

	mkdir gcov
	# The output from gcov is valuable to save too.
	gcov -o lib lib/lib*.c | tee gcov/SUMMARY
	egcov -r bin/*.cc | tee -a gcov/SUMMARY
	mv *.gcov gcov/
}

#
# Use C It Run on itself.
#
actions CCItRunRun
{
	set -e

	#
	# Namespace global instrumentation variables such that they don't
	# collide with the actual instrumentation.
	#
	sed -i \
		-e "s,struct citrun_node,struct ccitrunrun_node," \
		-e "s,citrun_node_add,ccitrunrun_node_add," \
		-e "s,citrun_major,ccitrunrun_major,g" \
		-e "s,citrun_minor,ccitrunrun_minor,g" \
		lib.h lib.c inst_action.cc inst_fe.cc gl_procfile.cc

	#
	# Change binary names so we can do a side by side installation.
	#
	sed -i \
		-e "s,citrun_inst,ccitrunrun_inst," \
		-e "s,citrun_term,ccitrunrun_term," \
		-e "s,citrun_gl,ccitrunrun_gl," \
		-e "s,libcitrun,libccitrunrun," \
		Jamfile lib.c inst_main.cc
	jam
}

Analysis	analysis ;
TestCoverage	coverage ;
CCItRunRun	ccitrunrun ;

# Quote an entire file and add a variable declaration prefixing the string.
rule Stringize
{
	MakeLocate $(1) : $(LOCATE_SOURCE) ;
	SEARCH on $(2) = $(SEARCH_SOURCE) ;
	Depends $(1) : $(2) ;
	Clean clean : $(1) ;
}

if $(NT) {
	actions Stringize
	{
		> $(<) echo static const char *$(1:B) = R"(
		>> $(<) type $(>)
		>> $(<) echo )";
	}
} else {
	actions Stringize
	{
		> $(<) echo "static const char *$(1:B) = R\"("
		>> $(<) cat $(>)
		>> $(<) echo ")\";"
	}
}

#
# Different build modifiers for static analysis and test coverage.
#
actions Analysis
{
	scan-build --use-c++=eg++ ./configure
	scan-build -o html --use-c++=eg++ jam
}

actions TestCoverage
{
	set -e
	CFLAGS="-coverage" LDFLAGS="-coverage" ./configure
	jam

	# Roll libgcov.a into libcitrun.a.
	ar -M < t/libcitrun_gcov.mri

	prove
	# prove tt

	gcov -o . lib*.c
	egcov -r *.cc

	mkdir gcov
	mv *.gcov gcov/
}

#
# Use C It Run on itself.
#
actions CCItRunRun
{
	set -e

	#
	# Namespace global instrumentation variables such that they don't
	# collide with the actual instrumentation.
	#
	sed -i \
		-e "s,struct citrun_node,struct ccitrunrun_node," \
		-e "s,citrun_node_add,ccitrunrun_node_add," \
		-e "s,citrun_major,ccitrunrun_major,g" \
		-e "s,citrun_minor,ccitrunrun_minor,g" \
		lib.h lib.c inst_action.cc inst_fe.cc gl_procfile.cc

	#
	# Change binary names so we can do a side by side installation.
	#
	sed -i \
		-e "s,citrun_inst,ccitrunrun_inst," \
		-e "s,citrun_term,ccitrunrun_term," \
		-e "s,citrun_gl,ccitrunrun_gl," \
		-e "s,libcitrun,libccitrunrun," \
		Jamfile lib.c inst_main.cc
	jam
}

Analysis	analysis ;
TestCoverage	coverage ;
CCItRunRun	ccitrunrun ;

.\"
.\" Copyright (c) 2016 Kyle Milz <kyle@0x30.net>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: August 3 2016 $
.Dt CITRUN-CHECK 1
.Os
.Sh NAME
.Nm citrun-check
.Nd check directories for log files
.Sh SYNOPSIS
.Nm
.Op Ar dir
.Sh DESCRIPTION
The
.Nm
script recursively checks either
.Ar dir ,
if given, or the current working directory for
.Pa citrun.log
files created by the rewrite tool.
.Pp
When
.Nm
does not have its stdout redirected it prints a
.Qq Checking
line that adds a single period for every file processed.
.Pp
Once checking is complete two sections are printed.
The text below shows the output of
.Nm
after
.Xr citrun-wrap 1
had been used to instrument a simple project:
.Bd -literal -offset indent
Checking '/home/kyle/test' ..done

Summary:
         1 Calls to the rewrite tool
         1 Source files used as input
         1 Application link commands
         1 Rewrite successes
         1 Rewritten source compile successes

Totals:
         6 Lines of source code
        53 Milliseconds spent rewriting source
         1 Functions called 'main'
         1 Function definitions
         1 Return statement values
         3 Total statements
.Ed
.Pp
The first section is a summary. It has counts that are related to source files
and source compilation. The most important counts are in this section.
.Pp
The second section contains rewriting totals. These counts are related to
individual source code elements that were possibly rewritten during a previous
.Xr citrun-wrap 1
session.
.Sh SUMMARY COUNTS
.Pp
The summary section contains the most important counts. The following table
describes each of them in detail:
.Pp
.Bl -tag -width Ds
.It Qq Calls to the rewrite tool
The total number of times
.Xr citrun-inst 1
was called.
.It Qq Source files used as input
The total number of C/C++ source files that had rewriting attempted on them.
.It Qq Application link commands
Number of link commands detected and modified to include the runtime.
.It Qq Rewrite parse {warnings,errors}
The total number of parsing problems the rewriter had.
.It Qq Rewrite successes
The number of times the rewriter successfully transformed the entire source
file.
.It Qq Rewrite failures (False Positive)
The number of times the rewriter encountered a fatal error however the native
compiler also failed to compile the same code.
.It Qq Rewrite failures (True Positive!)
The number of times the rewriter encountered a fatal error but the native
compiler succeeded on the same code. This is bad.
.It Qq Rewritten source compile successes
The number of times the rewritten source file is processed successfully by the
native compiler.
.It Qq Rewritten source compile failures (False Positive)
Similar to rewrite failure false positives, the number of times the native
compiler fails on both the rewritten source and the original source.
.It Qq Rewritten source compile failures (True Positive!)
The number of times the native compiler fails on the rewritten source and
succeeds on the original source. This is bad.
.El
.Sh EXIT STATUS
.Ex -std
.Sh SEE ALSO
.Xr citrun-wrap 1

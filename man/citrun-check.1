.\"
.\" Copyright (c) 2016 Kyle Milz <kyle@0x30.net>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: August 3 2016 $
.Dt CITRUN-CHECK 1
.Os
.Sh NAME
.Nm citrun-check
.Nd check directories for log files
.Sh SYNOPSIS
.Nm
.Op Ar dir
.Sh DESCRIPTION
The
.Nm
script recursively checks either
.Ar dir ,
if given, or the current working directory for
.Pa citrun.log
files created by
.Xr citrun-wrap 1 .
.Pp
When
.Nm
does not have its standard output redirected it prints a
.Qq Checking
line that adds a single period for every file processed.
.Pp
Once checking is complete two sections are printed.
The text below shows the output of
.Nm
after
.Xr citrun-wrap 1
had been used to instrument a simple project:
.Bd -literal -offset indent
Summary:
         1 Source files used as input
         1 Application link commands
         1 Rewrite successes
         1 Rewritten source compile successes

Totals:
         6 Lines of source code
        53 Milliseconds spent rewriting source
         1 Function definitions
         1 Return statement values
         3 Total statements
.Ed
.Pp
The first section is a summary regarding how thoroughly the project was
instrumented. The most important counts are in this section.
.Pp
The second section contains rewriting totals. These are the total number of
visited source code elements from the source files used as input.
.Sh SUMMARY COUNTS
.Pp
The most important counts are failures. Source rewriting can fail for a few
reasons and is not always a bad thing.
.Pp
The following table shows all of the possible counts, and describes them:
.Pp
.Bl -tag -width Ds
.It Qq Source files used as input
The total number of C/C++ source files that had rewriting attempted on them.
.It Qq Application link commands
Number of link commands detected and modified to include the runtime.
.It Qq Rewrite parse {warnings,errors}
The total number of parsing problems the rewriter had.
.It Qq Rewrite successes
The number of times the rewriter successfully transformed the entire source
file.
.It Qq Rewrite failures
Rewriting a source file failed. There are two failure cases, either native
parsing the original source file also fails, or, only citrun-inst failed parsing
the source file.
.It Qq Rewritten source compile successes
The number of times the rewritten source file is processed successfully by the
native compiler.
.It Qq Rewritten source compile failures
Compiling the rewritten source file failed. There are two failure cases, either
compiling the original source file also fails or only compiling the
rewritten source fails.
.El
.Sh EXIT STATUS
.Ex -std
.Sh SEE ALSO
.Xr citrun-wrap 1

diff --git a/SCV/Project.pm b/SCV/Project.pm
index 5ca6b48..da95995 100644
--- a/SCV/Project.pm
+++ b/SCV/Project.pm
@@ -49,7 +49,7 @@ EOF
 	syswrite( $makefile_fh, $makefile );
 
 	# Use the wrapper to make sure it works
-	my $ret = system( "wrap/scv_wrap make -C $tmp_dir" );
+	my $ret = system( "wrap/scv_wrap bsdmake -C $tmp_dir" );
 	die "make failed: $ret\n" if ($ret);
 }
 
diff --git a/instrument/Makefile b/instrument/Makefile
index ef67bae..8f80e9c 100644
--- a/instrument/Makefile
+++ b/instrument/Makefile
@@ -8,7 +8,8 @@ CXXFLAGS += `llvm-config --cxxflags`
 LDFLAGS += `llvm-config --ldflags`
 
 # Clang has a circular dependencies here, use "linker group options" to avoid
-LDADD += -Wl,--start-group \
+LDADD += \
+	-lstdc++ \
 	-lclangAST \
 	-lclangAnalysis \
 	-lclangBasic \
@@ -18,12 +19,11 @@ LDADD += -Wl,--start-group \
 	-lclangFrontendTool \
 	-lclangLex \
 	-lclangParse \
-	-lclangRewriteCore \
+	-lclangRewrite \
 	-lclangRewriteFrontend \
 	-lclangSema \
 	-lclangSerialization \
-	-lclangTooling \
-	-Wl,--end-group \
+	-lclangTooling
 
 LDADD += `llvm-config --libs bitreader mcparser transformutils option --system-libs`
 
diff --git a/instrument/instrument_action.cc b/instrument/instrument_action.cc
index cf1eb96..b60d6c0 100644
--- a/instrument/instrument_action.cc
+++ b/instrument/instrument_action.cc
@@ -15,7 +15,7 @@
 #include "runtime_h.h"
 
 
-clang::ASTConsumer *
+std::unique_ptr<clang::ASTConsumer>
 InstrumentAction::CreateASTConsumer(clang::CompilerInstance &CI, clang::StringRef file)
 {
 	// llvm::errs() << "** Creating AST consumer for: " << file << "\n";
@@ -24,7 +24,7 @@ InstrumentAction::CreateASTConsumer(clang::CompilerInstance &CI, clang::StringRe
 
 	// Hang onto a reference to this so we can read from it later
 	InstrumentASTConsumer = new RewriteASTConsumer(TheRewriter);
-	return InstrumentASTConsumer;
+	return std::unique_ptr<clang::ASTConsumer>(InstrumentASTConsumer);
 }
 
 unsigned int
diff --git a/instrument/instrument_action.h b/instrument/instrument_action.h
index fd229db..3da8282 100644
--- a/instrument/instrument_action.h
+++ b/instrument/instrument_action.h
@@ -30,7 +30,7 @@ public:
 	InstrumentAction() {};
 
 	void EndSourceFileAction() override;
-	clang::ASTConsumer *CreateASTConsumer(clang::CompilerInstance &, clang::StringRef) override;
+	std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(clang::CompilerInstance &, clang::StringRef) override;
 
 private:
 	clang::Rewriter TheRewriter;
diff --git a/instrument/main.cc b/instrument/main.cc
index 17e90ed..763e6d1 100644
--- a/instrument/main.cc
+++ b/instrument/main.cc
@@ -67,6 +67,8 @@ instrument(int argc, char *argv[], std::vector<std::string> const &source_files)
 	// Append original command line verbatim
 	clang_argv.insert(clang_argv.end(), argv, argv + argc);
 
+	clang_argv.push_back("-I/opt/local/libexec/llvm-3.7/lib/clang/3.7/include");
+
 	// give clang it's <source files> -- <native command line> arg style
 	int clang_argc = clang_argv.size();
 	clang::tooling::CommonOptionsParser op(clang_argc, &clang_argv[0], ToolingCategory);
@@ -78,7 +80,7 @@ instrument(int argc, char *argv[], std::vector<std::string> const &source_files)
 	// that will return a new MyFrontendAction object every time.  To
 	// further customize this, we could create our own factory class.
 	// int ret = Tool.run(new MFAF(inst_files));
-	int ret = Tool.run(clang::tooling::newFrontendActionFactory<InstrumentAction>());
+	int ret = Tool.run(&(*clang::tooling::newFrontendActionFactory<InstrumentAction>()));
 	if (ret)
 		warnx("Instrumentation failed");
 	return ret;
diff --git a/viewer/Makefile b/viewer/Makefile
index 6de9010..9c9a1ad 100644
--- a/viewer/Makefile
+++ b/viewer/Makefile
@@ -15,9 +15,11 @@ SRCS = main.cc \
 MKDEP = `pkg-config gl glew freetype2 --cflags`
 
 CXXFLAGS += -std=c++11
-CXXFLAGS += `pkg-config gl glew freetype2 --cflags` -I/usr/local/include
+CXXFLAGS += -Wno-deprecated
+CXXFLAGS += `pkg-config glew freetype2 --cflags`
 
-LDFLAGS += `pkg-config gl glew freetype2 --libs`
-LDADD += -lstdc++ -lm -lglut glyphy/libglyphy.a
+LDFLAGS += `pkg-config glew freetype2 --libs`
+LDADD += -framework OpenGL -framework GLUT
+LDADD += -lstdc++ -lm glyphy/libglyphy.a
 
 .include <bsd.prog.mk>
